[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "So what’s this all about then?",
    "section": "",
    "text": "I decided to give the 30 Day Map Challenge a go as a learning exercise. My efforts are certainly not an exercise in flashy or impressive cartographic design.\nI’ve been teaching with tmap for a few years. Version 4.0 is in the offing and introduces some major changes, which at first glance make it trickier to teach, and closer in many ways to ggplot2, which I have often considered instead.\nSo… I thought I’d make a bunch of maps using both platforms to get a feel for the pros and cons of each."
  },
  {
    "objectID": "maps/01-points.html",
    "href": "maps/01-points.html",
    "title": "01 Points",
    "section": "",
    "text": "A map with points.\nThe first three themes (points, lines, areas) all work with the same data. I’m making a meta-point about the somewhat arbitrary nature of geometries in spatial data (a polygon is after all conceputalised as a point set)."
  },
  {
    "objectID": "maps/01-points.html#libraries",
    "href": "maps/01-points.html#libraries",
    "title": "01 Points",
    "section": "Libraries",
    "text": "Libraries\n\n\nCode\nlibrary(sf)\nlibrary(tmap)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(ggplot2)\n\n\nIronically, of the three, the points maps was the fiddliest to make from the data wrangling perspective, because of course, the source data is a polygon dataset."
  },
  {
    "objectID": "maps/01-points.html#data-wrangling",
    "href": "maps/01-points.html#data-wrangling",
    "title": "01 Points",
    "section": "Data wrangling",
    "text": "Data wrangling\n\n\nCode\nw &lt;- 500\n\nnz &lt;- st_read(\"data/nz.gpkg\") %&gt;%\n  mutate(Land = TRUE)\n\nbb &lt;- nz %&gt;% \n  st_bbox() %&gt;%\n  st_as_sfc() %&gt;%\n  st_as_sf(crs = st_crs(nz)) %&gt;%\n  st_buffer(w, nQuadSegs = 1) \n\nshore &lt;- nz %&gt;% \n  st_cast(\"MULTILINESTRING\") %&gt;%\n  st_cast(\"LINESTRING\") %&gt;%\n  st_buffer(w) %&gt;%\n  st_as_sfc() %&gt;%\n  st_as_sf(crs = st_crs(nz)) %&gt;%\n  mutate(Shore = TRUE)\n\nland &lt;- nz %&gt;%\n  st_union() %&gt;%\n  st_buffer(w)\n\nwater &lt;- bb %&gt;%\n  st_difference(land) %&gt;%\n  mutate(Water = TRUE)\n\npts &lt;- bb %&gt;%\n  st_sample(250000) %&gt;%\n  st_sf() %&gt;%\n  st_as_sf(crs = st_crs(nz)) %&gt;%\n  st_join(water) %&gt;%\n  st_join(nz) %&gt;%\n  st_join(shore) %&gt;%\n  mutate(Water = replace_na(Water, FALSE),\n         Land  = replace_na(Land, FALSE),\n         Shore = replace_na(Shore, FALSE),\n         What = NA) %&gt;%\n  slice(sample(1:n()))\n\npts[pts$Water, \"What\"] &lt;- \"Water\"\npts[pts$Land, \"What\"] &lt;- \"Land\"\npts[pts$Shore, \"What\"] &lt;- \"Shore\"\n\npts &lt;- pts %&gt;%\n  mutate(What = as.factor(What)) %&gt;%\n  filter(!is.na(What))"
  },
  {
    "objectID": "maps/01-points.html#the-maps",
    "href": "maps/01-points.html#the-maps",
    "title": "01 Points",
    "section": "The maps",
    "text": "The maps\n\ntmap\ntmap v4’s slightly verbose format is apparent here. There is no obvious way to make legend elements larger hence more readable.\n\ntm_shape(pts) + \n  tm_dots(\n    fill = \"What\",\n    fill.scale = tm_scale_categorical(\n      values = c(\"#33aa6660\", \"#0000ff60\", \"#bbddff60\"),\n      levels = c(\"Land\", \"Shore\", \"Water\")), \n    size = 0.05) +\n  tm_layout(\n    frame = FALSE,\n    legend.frame = FALSE,\n    legend.outside = TRUE)"
  },
  {
    "objectID": "maps/01-points.html#ggplot2",
    "href": "maps/01-points.html#ggplot2",
    "title": "01 Points",
    "section": "ggplot2",
    "text": "ggplot2\nIn ggplot2 you can override the default symbol size in the colour legend, although it’s not exactly an obvious snippet of code! The default legend position in ggplot2 is not my preference, but I can’t be bothered to move it.\n\nggplot(pts) +\n  geom_sf(aes(colour = What), size = 0.025) +\n  scale_colour_manual(values = c(\"#33aa6660\", \"#0000ff60\", \"#bbddff60\")) + \n  guides(colour = guide_legend(override.aes = list(size = 5))) +\n  theme_void()"
  },
  {
    "objectID": "maps/02-lines.html",
    "href": "maps/02-lines.html",
    "title": "02 Lines",
    "section": "",
    "text": "A map with lines."
  },
  {
    "objectID": "maps/02-lines.html#libraries",
    "href": "maps/02-lines.html#libraries",
    "title": "02 Lines",
    "section": "Libraries",
    "text": "Libraries\n\n\nCode\nlibrary(sf)\nlibrary(tmap)\nlibrary(dplyr)\nlibrary(ggplot2)"
  },
  {
    "objectID": "maps/02-lines.html#data-wrangling",
    "href": "maps/02-lines.html#data-wrangling",
    "title": "02 Lines",
    "section": "Data wrangling",
    "text": "Data wrangling\n\n\nCode\nnz &lt;- st_read(\"data/nz.gpkg\") %&gt;%\n  st_cast(\"MULTILINESTRING\") %&gt;%\n  mutate(What = \"Shore\",\n         What = as.factor(What))"
  },
  {
    "objectID": "maps/02-lines.html#tmap",
    "href": "maps/02-lines.html#tmap",
    "title": "02 Lines",
    "section": "tmap",
    "text": "tmap\nIt seems like if you don’t ‘need’ a legend, i.e. if there is only one symbolisation in your map, then tmap won’t generate one, and you have to ‘force it’ with the tm_add_legend function.\n\ntm_shape(nz, bbox = nz %&gt;% st_union() %&gt;% st_buffer(500)) + \n  tm_lines(\n    col = \"blue\",\n    lwd = 0.5) + \n  tm_add_legend(\n    type = \"lines\",\n    col = c(\"blue\"),\n    labels = c(\"Shore\"),\n    title = \"What\") +\n  tm_layout(\n    frame = FALSE,\n    legend.frame = FALSE,\n    legend.outside = TRUE)"
  },
  {
    "objectID": "maps/02-lines.html#ggplot2",
    "href": "maps/02-lines.html#ggplot2",
    "title": "02 Lines",
    "section": "ggplot2",
    "text": "ggplot2\n\nggplot(nz) +\n  geom_sf(aes(colour = What), linewidth = 0.25) +\n  scale_colour_manual(values = c(\"blue\")) +\n  theme_void()"
  },
  {
    "objectID": "maps/03-polygons.html",
    "href": "maps/03-polygons.html",
    "title": "03 Polygons",
    "section": "",
    "text": "A map with polygons."
  },
  {
    "objectID": "maps/03-polygons.html#libraries",
    "href": "maps/03-polygons.html#libraries",
    "title": "03 Polygons",
    "section": "Libraries",
    "text": "Libraries\n\n\nCode\nlibrary(sf)\nlibrary(tmap)\nlibrary(dplyr)\nlibrary(ggplot2)"
  },
  {
    "objectID": "maps/03-polygons.html#data-wrangling",
    "href": "maps/03-polygons.html#data-wrangling",
    "title": "03 Polygons",
    "section": "Data wrangling",
    "text": "Data wrangling\n\n\nCode\nnz &lt;- st_read(\"data/nz.gpkg\") %&gt;%\n  st_union() %&gt;%\n  st_as_sf() %&gt;%\n  mutate(What = \"Land\")\n\nnot_nz &lt;- nz %&gt;% \n  st_union() %&gt;%\n  st_buffer(500) %&gt;%\n  st_bbox() %&gt;%\n  st_as_sfc() %&gt;%\n  st_as_sf() %&gt;%\n  st_difference(nz) %&gt;%\n  mutate(What = \"Water\")\n\nnz_not_nz &lt;- nz %&gt;%\n  bind_rows(not_nz) %&gt;%\n  mutate(What = as.factor(What))"
  },
  {
    "objectID": "maps/03-polygons.html#the-maps",
    "href": "maps/03-polygons.html#the-maps",
    "title": "03 Polygons",
    "section": "The maps",
    "text": "The maps\nPerhaps unsurprisingly, this is the case where both packages require the least additional work to get the desired result.\n\ntmap\n\ntm_shape(nz_not_nz) + \n  tm_fill(\n    fill = \"What\", \n    fill.scale = tm_scale_categorical(\n      values = c(\"#33aa66\", \"#bbddff\"),\n      levels = c(\"Land\", \"Water\"))) +\n  tm_layout(\n    frame = FALSE,\n    legend.frame = FALSE,\n    legend.outside = TRUE)"
  },
  {
    "objectID": "maps/03-polygons.html#ggplot2",
    "href": "maps/03-polygons.html#ggplot2",
    "title": "03 Polygons",
    "section": "ggplot2",
    "text": "ggplot2\n\nggplot(nz_not_nz) +\n  geom_sf(aes(fill = What), linewidth = 0) +\n  scale_fill_manual(values = c(\"#33aa66\", \"#bbddff\")) +\n  theme_void()"
  }
]