---
title: "30 Day Map Challenge 2023"
subtitle: "(Mostly) `tmap` _vs_ `ggplot2`"
author: "David O'Sullivan"
output-location: slide
format: 
  revealjs:
    theme: [sky, custom.scss]
    navigation-mode: vertical
    fragment-in-url: true
    slide-number: c/t
    footer: "Maptime! Wellington, 20 March 2024"
    self-contained: true
    center: true
execute:
  echo: true
  warning: false
  message: false
  results: false
knitr:
  opts_chunk: 
    warning: false
    message: false
    results: false
---

# Overview {.smaller}
Decided to give it a go

&lt;spoilers&gt; It was... interesting?!

Also: hard

# `tmap` and `ggplot2` {.smaller}
Two great packages for thematic mapping in _R_

Both lean into the so-called _grammar of graphics_

```{r}
#| echo: false
library(sf)
library(tmap)
library(ggplot2)
library(cowplot)
library(ggplotify)
```

## `ggplot2`
Based on _The Grammar of Graphics_

Aesthetic 'mappings' between variables in data and visual variables

Focused on applying 'geometries'&mdash;`geom_point`, `geom_line`, `geom_bar`, etc.&mdash;to data, e.g.

    ggplot2(dataset) +
      geom_point(aes(x = var1, y = var2))

One geometry option is `geom_sf` for making maps

---
  
```{r}
# read the data
ak <- st_read("../data/ak-city-demographics-2018.gpkg")
nz <- st_read("../data/nz.gpkg")

bb <- st_bbox(ak)

map1 <- ggplot(nz) + 
  geom_sf(lwd = 0) +
  geom_sf(data = ak, aes(fill = pop)) +
  coord_sf(xlim = c(bb[1], bb[3]), ylim = c(bb[2], bb[4])) +
  guides(fill = guide_legend(title = "Population")) +
  theme(panel.background = element_rect(fill = "#bbeeff"))

map1
```

```{r}
#| echo: false
ggsave("map1.png", width = 8, height = 5)
```

## `tmap`
A `ggplot`-a-like tailored to thematic maps

In place of `aes()` to specify the data-visual variable relations, there are functions `tm_polygons`, `tm_borders`, `tm_fill`, `tm_lines`, and so on

Also provides `tm_scalebar`, `tm_compass` and other 'map frills'

---

```{r}
map2 <- tm_shape(nz, bbox = ak) +
  tm_fill() +
  tm_shape(ak) +
  tm_polygons(fill = "pop", title = "Population") +
  tm_layout(bg.color = "#bbeeff", legend.bg.color = "white")

map2
```

```{r}
#| echo: false
tmap_save(map2, "map2.png", width = 8, height = 5)
```

---

:::: {.columns}
::: {.column width="50%"}
![](map1.png)
:::

:::{.column width="50%"}
![](map2.png)
:::
::::

# The challenge {.smaller}
See it at [dosull.github.io/30-day-maps-2023](https://dosull.github.io/30-day-maps-2023)

## {background-iframe="https://dosull.github.io/30-day-maps-2023"  background-interactive=True}

# Reflections {.smaller}
You _don't_ need a theme

_Cheat_ and _forgive_ yourself

Don't do it for an audience

`tmap` is likely still preferable to `ggplot2` for basic thematic maps

## For more
[dosull.github.io](https://dosull.github.io)
[github.com/DOSull/30-day-maps-2023](https://github.com/DOSull/30-day-maps-2023)
[github.com/DOSull/weaving-space](https://github.com/DOSull/weaving-space)

